#! /usr/bin/env python3

from ipaddress import IPv4Network, IPv6Network
from os import environ
import sys

num_gfmds = int(environ['GFDOCKER_NUM_GFMDS'])
num_gfsds = int(environ['GFDOCKER_NUM_GFSDS'])
num_clients = int(environ['GFDOCKER_NUM_CLIENTS'])
ip_version = environ['GFDOCKER_IP_VERSION']
subnet = environ['GFDOCKER_SUBNET']
start_host_addr = int(environ['GFDOCKER_START_HOST_ADDR'])
hostname_prefix_gfmd = environ['GFDOCKER_HOSTNAME_PREFIX_GFMD']
hostname_prefix_gfsd = environ['GFDOCKER_HOSTNAME_PREFIX_GFSD']
hostname_prefix_client = environ['GFDOCKER_HOSTNAME_PREFIX_CLIENT']
hostname_suffix = environ['GFDOCKER_HOSTNAME_SUFFIX']

hostport_s3_http = environ['GFDOCKER_HOSTPORT_S3_HTTP']
hostport_s3_https = environ['GFDOCKER_HOSTPORT_S3_HTTPS']
hostport_s3_direct = environ['GFDOCKER_HOSTPORT_S3_DIRECT']

is_cgroup_v2 = environ['IS_CGROUP_V2']

def tobool(s):
    return s.lower() == 'true'

use_keycloak = tobool(environ['GFDOCKER_SASL_USE_KEYCLOAK'])

if ip_version == '4':
    nw = IPv4Network(subnet)
elif ip_version == '6':
    nw = IPv6Network(subnet)
else:
    sys.exit('invalid syntax: GFDOCKER_IP_VERSION')

class ContainerHost:
    def __init__(self, name, ipaddr):
        self.name = name
        self.hostname = name + hostname_suffix
        self.ipaddr = ipaddr

hi = nw.hosts()
hosts = []

for i in range(0, start_host_addr - 1):
    next(hi)  # skip unused hosts

# pin IP address for client1
for i in range(0, num_clients):
    hosts.append(ContainerHost(
        '{}{}'.format(hostname_prefix_client, i+1),
        next(hi)
    ))
for i in range(0, num_gfmds):
    hosts.append(ContainerHost(
        '{}{}'.format(hostname_prefix_gfmd, i+1),
        next(hi)
    ))

for i in range(0, num_gfsds):
    hosts.append(ContainerHost(
        '{}{}'.format(hostname_prefix_gfsd, i+1),
        next(hi)
    ))

if is_cgroup_v2 == 'true':
    privileged = 'true'
    disable_cgroupfs_mount = '#'
    disable_security_opt = '#'
    disable_capadd = '#'
else:
    privileged = 'false'
    disable_cgroupfs_mount = ''
    disable_security_opt = ''
    disable_capadd = ''

print('''\
# This file was automatically generated.
# Do not edit this file.

version: "3.4"

x-common-gfarm:
  &common-gfarm
  image: gfarm-dev:${GFDOCKER_PRJ_NAME}
''', end='')

print('''\
  volumes:
    - ./mnt:/mnt:rw
    {disable_cgroupfs_mount}- /sys/fs/cgroup:/sys/fs/cgroup:ro
  devices:
    - /dev/fuse:/dev/fuse

'''.format(disable_cgroupfs_mount=disable_cgroupfs_mount),
      end='')

print('''\
x-common:
  &common
  {disable_security_opt}security_opt:
  {disable_security_opt}  - seccomp:unconfined
  {disable_security_opt}  - apparmor:unconfined
  {disable_capadd}cap_add:
  {disable_capadd}  - SYS_ADMIN
  {disable_capadd}  - SYS_PTRACE
  privileged: {privileged}
  extra_hosts:
'''.format(disable_security_opt=disable_security_opt,
           disable_capadd=disable_capadd,
           privileged=privileged),
      end='')

for h in hosts:
    print('    - "{} {}:{}"'.format(h.hostname, h.name, str(h.ipaddr)))

print('''\

services:
''', end='')

if hostport_s3_http and hostport_s3_https:
    client1_ports = '''
    ports:
      - {}:80
      - {}:443
      - {}:51000'''.format(
          int(hostport_s3_http),
          int(hostport_s3_https),
          int(hostport_s3_direct))
else:
    client1_ports = ''

for h in hosts:
    ports = '';
    if h.name == 'client1':
        ports = client1_ports
    print('''\
  {}:
    hostname: {}{}
    networks:
      gfarm_dev:
        ipv{}_address: {}
    <<: [*common-gfarm, *common]

'''.format(h.name, h.hostname, ports, ip_version, str(h.ipaddr)), end='')

if use_keycloak:
   print('''\

  desktop:
    build: common/oauth2/ubuntu
    volumes:
      - ./mnt:/mnt:ro
    networks:
      gfarm_dev:
    ports:
      - "0.0.0.0:23389:3389"
    <<: *common
  jwt-server:
    hostname: jwt-server{}
    build: common/oauth2/apache
    tty: true
    volumes:
      - ./mnt:/mnt:ro
    networks:
      gfarm_dev:
    <<: *common
  jwt-tomcat:
    build:
     context: ../../
     dockerfile: docker/dev/common/oauth2/tomcat/Dockerfile
    volumes:
      - ./mnt:/mnt:ro
    networks:
      gfarm_dev:
    environment:
      - 'CATALINA_OPTS=-Duser.timezone=Asia/Tokyo'
  jwt-db:
    image: mariadb
    volumes:
      - "./common/oauth2/mariadb/initdb.d:/docker-entrypoint-initdb.d"
    networks:
      gfarm_dev:
    environment:
      - MYSQL_ROOT_PASSWORD=passwd
      - MYSQL_DATABASE=gfarm
      - MYSQL_USER=gfarm
      - MYSQL_PASSWORD=gfarm123
  jwt-keycloak:
    build:
      context: common
      dockerfile: oauth2/keycloak/Dockerfile
    volumes:
      - ./mnt:/mnt:ro
    networks:
      gfarm_dev:
    environment:
      DB_VENDOR: h2
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
'''.format(hostname_suffix), end='')

print('''\

networks:
  gfarm_dev:
    name: gfarm_dev
    external: false
    ipam:
      config:
        - subnet: {}
'''.format(subnet), end='')
